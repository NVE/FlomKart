devtools::document()
install.packages('quadprog')
install.packages("quadprog")
install.packages("goftest")
install.packages("dplyr")
library('dplyr')
remove.packages("dplyr")
install.packages('dplyr')
install.packages('evd')
install.packages('nsRFA')
install.packages('ismev')
install.packages('fitrdistrplus')
install.packages('fitdistrplus')
install.packages('parallel')
install.packages('foreach')
devtools::document()
library(FlomKart)
dat <- read.table("rawdata/2016-10-14-amsvalues.txt")
dat <- read.table("rawdata/2016-10-14-amsvalues.txt", sep = ";")
View(dat)
View(dat)
save(dat, "/data/flood_data.RData")
save(dat, "data/flood_data.RData")
?save
save(dat, file = "data/flood_data.RData")
install.packages('doMC')
install.packages('doSNOW')
dat$year <- year(dat$daily_ams_dates)
dat <- load(flood_data)
dat <- read.table("rawdata/2016-10-14-amsvalues.txt", sep = ";")
save(dat, file = "data/preprocessed_flood_data.RData")
postproc_dat <- data.frame()
postproc_dat$regine <- year(dat$regine)
library(lubridate)
postproc_dat$regine <- year(dat$regine)
?year
date_vect <- ymd(dat$daily_ams_dates)
date_vect <- ymd(as.character(dat$daily_ams_dates))
View(dat)
x <- ymd("2012-03-26")
year(x)
library(lubridate)
date_vect <- ymd(as.character(dat$daily_ams_dates))
postproc_dat$regine <- year(dat$regine)
postproc_dat$regine <- dat$regine
postproc_dat$main <- dat$main
date_vect <- ymd(as.character(dat$daily_ams_dates))
postproc_dat$flow <- dat$daily_ams
class(dat$daily_ams_dates)
dat <- read.table("rawdata/2016-10-14-amsvalues.txt", sep = ";")
class(dat$daily_ams_dates)
dat$daily_ams_dates
dat$V3
postproc_dat <- data.frame(regine = c(), main = c(), year = c(), month = c(), day = c(), flow = c())
library(lubridate)
date_vect <- ymd(as.character(dat$V3))
View(date_vect)
date_vect <- ymd(dat$V3)
dat$V3
date_vect <- ymd(as.character(dat$V3))
View(date_vect)
postproc_dat$year <- year(date_vect)
postproc_dat <- data.frame(regine = c(), main = c(), year = c(), month = c(), day = c(), flow = c())
library(lubridate)
date_vect <- ymd(as.character(dat$V3))
date_vect <- ymd(as.Date(dat$V3))
ymd(dat$V3[1])
ymd(as.character(dat$V3[1]))
as.character(dat$V3[1])
as.character(dat$V3[2])
?read.table
dat <- read.table("rawdata/2016-10-14-amsvalues.txt", sep = ";", header = TRUE)
save(dat, file = "data/preprocessed_flood_data.RData")
postproc_dat <- data.frame(regine = c(), main = c(), year = c(), month = c(), day = c(), flow = c())
library(lubridate)
date_vect <- ymd(as.Date(dat$V3))
date_vect <- ymd(dat$daily_ams_dates)
postproc_dat$regine <- dat$regine
postproc_dat$regine <- dat$regine
postproc_dat <- data.frame()
postproc_dat$regine <- dat$regine
?"data.frame"
dat$main
postproc_dat <- data.frame(row.names = c("regine", "main", "year", "month", "day", "flow")
postproc_dat <- data.frame(row.names = c("regine", "main", "year", "month", "day", "flow"))
postproc_dat <- data.frame(row.names = c("regine", "main", "year", "month", "day", "flow"))
library(lubridate)
date_vect <- ymd(dat$daily_ams_dates)
postproc_dat$regine <- dat$regine
library(lubridate)
date_vect <- ymd(dat$daily_ams_dates)
postproc_dat <- data.frame(regine = dat$regine, main = dat$main,
year = year(date_vect), month = month(date_vect), day = day(date_vect),
flow = dat$daily_ams)
View(postproc_dat)
save(postproc_dat, file = "data/flood_data.RData")
devtools::document()
install.packages('doMC')
devtools::document()
devtools::document()
devtools::document()
library(FlomKart)
create_empty_nc()
source('~/GitHub/FlomKart/rawdata/convert_data.R', echo=TRUE)
getwd()
catchment.prop <- read.csv("/rawdata/Hydra_FeltparTabell.csv", sep=";")  # CHECK DIR
catchment.prop <- read.csv("rawdata/Hydra_FeltparTabell.csv", sep=";")  # CHECK DIR
source('~/GitHub/FlomKart/rawdata/convert_data.R', echo=TRUE)
source('~/GitHub/FlomKart/rawdata/convert_data.R', echo=TRUE)
dat <- read.table("rawdata/2016-10-14-amsvalues.txt", sep = ";", header = TRUE)
save(dat, file = "data/preprocessed_flood_data.RData")
library(lubridate)
date_vect <- ymd(dat$daily_ams_dates)
postproc_dat <- data.frame(regine = dat$regine, main = dat$main,
year = year(date_vect), month = month(date_vect), day = day(date_vect),
flow = dat$daily_ams)
save(postproc_dat, file = "data/flood_data.RData")
# Making list of snumber and getting rid of stations with not enough data
station.nb.vect.init <- na.omit(unique(dat$snumber))
min_years_data <- 30  # set the minimum number of years to accept a station
max_years_ss <-90 # The maximum record length for subsampling
station.nb.vect <- c()
length_rec <- c()
for (i in seq(along = station.nb.vect.init)) {
length_record <- length(which(dat$snumber == station.nb.vect.init[i]))
if (length_record >= min_years_data) {
station.nb.vect <- c(station.nb.vect, station.nb.vect.init[i])
length_rec <- c(length_rec, length_record)
}
}
## !!! Station number vector to put into the metadata file
flood_metadata$station.nb.vect <- station.nb.vect
flood_metadata$min_years_data <- 30
save(flood_metadata, file = "data/flood_metadata.RData")
flood_metadata <- list()
flood_metadata$station.nb.vect <- station.nb.vect
flood_metadata$min_years_data <- 30
save(flood_metadata, file = "data/flood_metadata.RData")
# Read station coordinates
utminfo <- read.table("rawdata/Coordinates_for_R.txt",
sep = "\t", header = T)  # CHECK DIR
dat <- save_coordinates(dat, station.nb.vect)  # this function is in LOAD.R
# Read catchments area
catchment.prop <- read.csv("rawdata/Hydra_FeltparTabell.csv", sep=";")  # CHECK DIR
catchment.prop$COMPOUND_K <- catchment.prop$COMPOUND_K / 1000  # to get the same numbers as in the main data file
catchment.size <- rep("NA", length(station.nb.vect))
catchment.min.height <- rep("NA", length(station.nb.vect))
catchment.max.height <- rep("NA", length(station.nb.vect))
indexes.in.catchmentprop  <- rep("NA", length(station.nb.vect))
for (i in seq(along = station.nb.vect)) {
if (is.numeric(which(catchment.prop$COMPOUND_K == station.nb.vect[i]))) {
if (as.numeric(length(which(catchment.prop$COMPOUND_K == station.nb.vect[i]))) > 0) {
indexes.in.catchmentprop[i] <- which(catchment.prop$COMPOUND_K == station.nb.vect[i])[1]
# [1] because some snumbers occur twice in the Hydra_FeltparTabell.csv
}
}
}
indexes.in.catchmentprop <- as.numeric(indexes.in.catchmentprop)
catchment.size <- as.numeric(catchment.prop$AREAL_UTM3[as.numeric(indexes.in.catchmentprop)])
catchment.min.height <- catchment.prop$HEIGHT_MIN[as.numeric(indexes.in.catchmentprop)]
catchment.max.height <- catchment.prop$HEIGHT_MAX[as.numeric(indexes.in.catchmentprop)]
library(FlomKart)
create_empty_nc()
create_empty_nc()
FlomKart::create_empty_nc()
FlomKart::create_empty_nc
load(flood_metadata)
dat <- read.table("rawdata/2016-10-14-amsvalues.txt", sep = ";", header = TRUE)
save(dat, file = "data/preprocessed_flood_data.RData")
library(lubridate)
date_vect <- ymd(dat$daily_ams_dates)
postproc_dat <- data.frame(regine = dat$regine, main = dat$main,
year = year(date_vect), month = month(date_vect), day = day(date_vect),
flow = dat$daily_ams)
save(postproc_dat, file = "data/flood_data.RData")
# Making list of snumber and getting rid of stations with not enough data
station.nb.vect.init <- na.omit(unique(dat$snumber))
min_years_data <- 30  # set the minimum number of years to accept a station
max_years_ss <-90 # The maximum record length for subsampling
station.nb.vect <- c()
length_rec <- c()
for (i in seq(along = station.nb.vect.init)) {
length_record <- length(which(dat$snumber == station.nb.vect.init[i]))
if (length_record >= min_years_data) {
station.nb.vect <- c(station.nb.vect, station.nb.vect.init[i])
length_rec <- c(length_rec, length_record)
}
}
## !!! Station number vector to put into the metadata file
flood_metadata <- list()
flood_metadata$station.nb.vect <- station.nb.vect
flood_metadata$min_years_data <- 30
save(flood_metadata, file = "data/flood_metadata.RData")
FlomKart::create_empty_nc()
library(FlomKart)
load("flood_metadata.RData")
load("data/flood_metadata.RData")
load("data/flood_data.RData")
FlomKart::create_empty_nc()
devtools::document()
devtools::document()
library(FlomKart)
load("data/flood_metadata.RData")
load("data/flood_data.RData")
FlomKart::create_empty_nc()
load("data/flood_metadata.RData")
library(FlomKart)
FlomKart::create_empty_nc()
load("data/flood_data.RData")
FlomKart::create_empty_nc()
dim.station <- length(meta_dat$station.nb.vect)
dat = flood_data
load("data/flood_data.RData")
load("data/flood_metadata.RData")
dat = flood_data
flood_metadata
flood_data
load("data/flood_data.RData")
dat <- read.table("rawdata/2016-10-14-amsvalues.txt", sep = ";", header = TRUE)
save(dat, file = "data/preprocessed_flood_data.RData")
library(lubridate)
date_vect <- ymd(dat$daily_ams_dates)
postproc_dat <- data.frame(regine = dat$regine, main = dat$main,
year = year(date_vect), month = month(date_vect), day = day(date_vect),
flow = dat$daily_ams)
save(postproc_dat, file = "data/flood_data.RData")
load("data/flood_data.RData")
dat = postproc_dat
meta_dat = flood_metadata
dim.station <- length(meta_dat$station.nb.vect)
dim.distr <- 5
dim.method <- 4
dim.param <- 3
dim.length_total_record <- 150
dim.length_rec <- 13   # This means that we will do subsampling for i1=30,i2=35,.....i13=90 years of record.
dim.random_runs <- 50
dim.characters <- 64
sampling_years <- seq(meta_dat$min_years_data, 90, 5)  # Subsampling from min_years_data until 90 years of data, increments of 5 years
dim.max_subsample <- max(sampling_years)
dim.length_rec <- length(sampling_years) + 1   # The last index is for storing the full record.
distr.name <- c("gumbel", "gamma", "gev", "gl", "pearson")
method.name <- c("mle", "Lmom", "mom", "bayes")
## Create an empty NC file with the parameters defined above
# Creation of the CDF dataset and definition of the dimensions
nc <- create.nc("output/flood_database.nc")  # CHECK DIR
att.put.nc(nc, "NC_GLOBAL", "title", "NC_CHAR", "Flood frequency analysis results")
library(RNetCDF)
nc <- create.nc("output/flood_database.nc")  # CHECK DIR
att.put.nc(nc, "NC_GLOBAL", "title", "NC_CHAR", "Flood frequency analysis results")
att.put.nc(nc, "NC_GLOBAL", "history", "NC_CHAR", paste("Created on", base::date()))
station.name <- rep("NA", dim.station)
station.utmN <- rep(-9999, dim.station)
station.utmE <- rep(-9999, dim.station)
station.long <- rep(-9999, dim.station)
station.lat <- rep(-9999, dim.station)
station.lat <- rep(-9999, dim.station)
station.length_rec <- length_rec
Q <- array(NA,dim=c(dim.station, dim.length_total_record))
years <- array(NA,dim=c(dim.station, dim.length_total_record))
dates <- array(NA,dim=c(dim.station, dim.length_total_record))
# Loop over the stations to fill variables: Q, station.name
for (i in seq(along = station.nb.vect)) {
indexes <- which(dat$snumber == station.nb.vect[i])
# Matrices
Q[i, 1:length_rec[i]] <- dat$flom_DOGN[indexes]
years[i, 1:length_rec[i]] <- dat$year[indexes]
dates[i, 1:length_rec[i]] <- dat$date[indexes]
# Vectors
station.name[i] <-  as.character(unique(dat$name[indexes]))
station.utmN[i] <- unique(dat$utmN[indexes])
station.utmE[i] <-  unique(dat$utmE[indexes])
station.long[i] <-  unique(dat$long[indexes])
station.lat[i] <-  unique(dat$lat[indexes])
}
random_indexes <- array(NA, dim = c(dim.station, dim.random_runs, length(sampling_years), dim.max_subsample))
dim.def.nc(nc, "station", dim.station)
dim.def.nc(nc, "distr", dim.distr)
dim.def.nc(nc, "method", dim.method)
dim.def.nc(nc, "param", dim.param)
dim.def.nc(nc, "length.rec", dim.length_rec)
dim.def.nc(nc, "length_total_record", dim.length_total_record)
dim.def.nc(nc, "random_runs", dim.random_runs)
dim.def.nc(nc, "max_string_length", dim.characters)
dim.def.nc(nc, "subsampling", length(sampling_years))
dim.def.nc(nc, "max_subsample", dim.max_subsample)
dim.def.nc(nc, "scalars", 1)
# sync.nc(nc)
# Definition of the variables and which dimension they are linked to
# Input data
var.def.nc(nc, varname = "Q", vartype = "NC_FLOAT", dimensions = c("station", "length_total_record"))
var.def.nc(nc, varname = "years", vartype = "NC_INT", dimensions = c("station", "length_total_record"))
var.def.nc(nc, varname = "dates", vartype = "NC_CHAR", dimensions = c("max_string_length", "station", "length_total_record"))
var.def.nc(nc, varname = "dates", vartype = "NC_CHAR", dimensions = c("max_string_length", "station", "length_total_record"))
var.def.nc(nc,  varname = "station.utmN", vartype = "NC_INT", dimensions = "station")
?var.def.nc
var.def.nc(nc, varname = "dates", vartype = "NC_CHAR", dimensions = c("max_string_length", "station", "length_total_record"))
var.def.nc(nc, varname = "Q", vartype = "NC_FLOAT", dimensions = c("station","length_total_record"))
devtools::document()
library(FlomKart)
load("data/flood_data.RData")
create.nc()
create.nc(postproc_dat, flood_metadata)
FlomKart::create_empty_nc(postproc_dat, flood_metadata)
